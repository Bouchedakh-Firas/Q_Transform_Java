package com.example.app.services;

import com.example.app.models.PerformanceTestResult;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Random;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

/**
 * Service for running performance tests.
 * Enhanced with additional Java-specific benchmarks and increased workloads.
 */
@Service
public class PerformanceTestService {

    private static final Logger logger = LoggerFactory.getLogger(PerformanceTestService.class);
    private static final int DEFAULT_TEST_DURATION_MS = 5000; // 5 seconds
    
    // CPU test constants
    private static final int MAX_PRIME = 2000000; // Increased from 1,000,000 to 2,000,000
    
    // Memory test constants
    private static final int MEMORY_ARRAY_SIZE = 20000000; // Increased from 10 million to 20 million integers (about 80MB)
    
    // Concurrency test constants
    private static final int CONCURRENCY_TASKS = 20; // Increased from 10 to 20
    
    // Stream operations test constants
    private static final int STREAM_DATA_SIZE = 10000000; // 10 million elements for stream operations
    
    // String operations test constants
    private static final int STRING_CONCAT_ITERATIONS = 100000; // Number of string concatenations
    private static final int STRING_BUILDER_ITERATIONS = 1000000; // Number of StringBuilder appends
    
    // Collections operations test constants
    private static final int COLLECTION_SIZE = 1000000; // Size of collections for testing
    
    // File I/O test constants
    private static final int FILE_IO_LINES = 100000; // Number of lines to write/read
    private static final String TEMP_DIR = System.getProperty("java.io.tmpdir");